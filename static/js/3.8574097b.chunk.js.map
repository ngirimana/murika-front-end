{"version":3,"sources":["containers/Auth/Auth.module.scss","containers/Auth/Login.jsx"],"names":["module","exports","Signin","state","controls","userName","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","password","maxLength","isPass","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","a","preventDefault","props","onSignin","this","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","errorMessage","error","className","classes","Error","authRedirect","isAuthenticated","to","Auth","SectionAccount","LoginHeight","AccountForm","PrimaryHeading","Row","activeClassName","active","Gbgcolor","onSubmit","btnType","loading","LinkText","Link","Component","connect","login","token","dispatch","actions"],"mappings":"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","file":"static/js/3.8574097b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3lqiI\",\"LinkText\":\"Auth_LinkText__2UH7u\",\"Link\":\"Auth_Link__26g8S\",\"Row\":\"Auth_Row__1UkDv\",\"Gbgcolor\":\"Auth_Gbgcolor__3P1XY\",\"active\":\"Auth_active__2FX51\",\"PrimaryHeading\":\"Auth_PrimaryHeading__zmnju\",\"Error\":\"Auth_Error__3-pcR\",\"SectionAccount\":\"Auth_SectionAccount__1g-yi\",\"Account\":\"Auth_Account__HjMAV\",\"LoginHeight\":\"Auth_LoginHeight__3iUhe\",\"AccountForm\":\"Auth_AccountForm__zWcuV\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, NavLink } from \"react-router-dom\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { checkValidity } from \"../../shared/utility\";\r\nimport classes from \"./Auth.module.scss\";\r\n\r\nclass Signin extends Component {\r\n  state = {\r\n    controls: {\r\n      userName: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Mail Address or Phone Number \",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 0,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 0,\r\n          maxLength: 120,\r\n          isPass: false,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n  };\r\n  UNSAFE_componentDidMount() {\r\n    if (this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n  submitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    event.preventDefault();\r\n    this.props.onSignin(\r\n      this.state.controls.userName.value,\r\n      this.state.controls.password.value\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        required={formElement.config.validation.required}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p className={classes.Error}>Some thing Went Wrong</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        <div className={classes.SectionAccount}>\r\n          <div className={classes.LoginHeight}>\r\n            <div className={classes.AccountForm}>\r\n              {authRedirect}\r\n              <h2 className={classes.PrimaryHeading}>Welcome Back </h2>\r\n              <div className={classes.Row}>\r\n                <NavLink\r\n                  to=\"/login\"\r\n                  activeClassName={classes.active}\r\n                  className={classes.Gbgcolor}\r\n                >\r\n                  Login\r\n                </NavLink>\r\n                <NavLink\r\n                  to=\"/auth\"\r\n                  activeClassName={classes.active}\r\n                  className={classes.Gbgcolor}\r\n                >\r\n                  New account\r\n                </NavLink>\r\n              </div>\r\n\r\n              <form onSubmit={this.submitHandler}>\r\n                {form}\r\n                {errorMessage}\r\n                <Button btnType=\"Success\">\r\n                  {\" \"}\r\n                  Log in {this.props.loading ? <Spinner /> : \"\"}{\" \"}\r\n                </Button>\r\n                <h4 className={classes.LinkText}>\r\n                  {\" \"}\r\n                  <NavLink to=\"/\" className={classes.Link}>\r\n                    Forgot Password?\r\n                  </NavLink>{\" \"}\r\n                </h4>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.login.loading,\r\n    error: state.login.error,\r\n    isAuthenticated: state.login.token !== null,\r\n    authRedirectPath: state.login.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSignin: (userName, password) =>\r\n      dispatch(actions.login(userName, password)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Signin);\r\n"],"sourceRoot":""}