{"version":3,"sources":["containers/Auth/Auth.module.scss","containers/Auth/Signup.jsx"],"names":["module","exports","Signup","state","controls","firstName","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","lastName","phoneNumber","maxLength","email","isEmail","password","isPass","userType","options","displayValue","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onSignup","formElementsArray","key","this","push","id","config","form","map","formElement","invalid","shouldValidate","changed","errorMessage","error","className","classes","Error","Auth","SectionAccount","Account","AccountForm","PrimaryHeading","Row","to","activeClassName","active","Gbgcolor","onSubmit","btnType","loading","LinkText","Link","Component","connect","signup","status","dispatch","actions"],"mappings":"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","file":"static/js/4.d9ac6561.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3lqiI\",\"LinkText\":\"Auth_LinkText__2UH7u\",\"Link\":\"Auth_Link__26g8S\",\"Row\":\"Auth_Row__1UkDv\",\"Gbgcolor\":\"Auth_Gbgcolor__3P1XY\",\"active\":\"Auth_active__2FX51\",\"PrimaryHeading\":\"Auth_PrimaryHeading__zmnju\",\"Error\":\"Auth_Error__3-pcR\",\"SectionAccount\":\"Auth_SectionAccount__1g-yi\",\"Account\":\"Auth_Account__HjMAV\",\"LoginHeight\":\"Auth_LoginHeight__3iUhe\",\"AccountForm\":\"Auth_AccountForm__zWcuV\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.scss\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { checkValidity } from \"../../shared/utility\";\r\n\r\nclass Signup extends Component {\r\n  state = {\r\n    controls: {\r\n      firstName: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"First Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 3,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      lastName: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Last Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 3,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      phoneNumber: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Phone Number\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 10,\r\n          maxLength: 13,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 8,\r\n          maxLength: 20,\r\n          isPass: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      userType: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"landlord\", displayValue: \"Landlord\" },\r\n            { value: \"tenant\", displayValue: \"Tenant\" },\r\n          ],\r\n        },\r\n        value: \"tenant\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSignup(\r\n      this.state.controls.firstName.value,\r\n      this.state.controls.lastName.value,\r\n      this.state.controls.phoneNumber.value,\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.controls.userType.value\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        required={formElement.config.validation.required}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p className={classes.Error}>Some thing Went Wrong</p>;\r\n    }\r\n    return (\r\n      <div className={classes.Auth}>\r\n        <div className={classes.SectionAccount}>\r\n          <div className={classes.Account}>\r\n            <div className={classes.AccountForm}>\r\n              <h2 className={classes.PrimaryHeading}>Welcome To Murika Home</h2>\r\n              <div className={classes.Row}>\r\n                <NavLink\r\n                  to=\"/login\"\r\n                  activeClassName={classes.active}\r\n                  className={classes.Gbgcolor}\r\n                >\r\n                  Login\r\n                </NavLink>\r\n                <NavLink\r\n                  to=\"/auth\"\r\n                  activeClassName={classes.active}\r\n                  className={classes.Gbgcolor}\r\n                >\r\n                  New account\r\n                </NavLink>\r\n              </div>\r\n              <form onSubmit={this.submitHandler}>\r\n                {form}\r\n                {errorMessage}\r\n                <Button btnType=\"Success\">\r\n                  {\" \"}\r\n                  SUBMIT {this.props.loading ? <Spinner /> : \"\"}{\" \"}\r\n                </Button>\r\n                <h4 className={classes.LinkText}>\r\n                  {\" \"}\r\n                  <NavLink to=\"/login\" className={classes.Link}>\r\n                    Already have an account?{\" \"}\r\n                  </NavLink>{\" \"}\r\n                </h4>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.signup.loading,\r\n    error: state.signup.error,\r\n    status: state.signup.status,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSignup: (firstName, lastName, phoneNumber, email, password, userType) =>\r\n      dispatch(\r\n        actions.signup(\r\n          firstName,\r\n          lastName,\r\n          phoneNumber,\r\n          email,\r\n          password,\r\n          userType\r\n        )\r\n      ),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);\r\n"],"sourceRoot":""}